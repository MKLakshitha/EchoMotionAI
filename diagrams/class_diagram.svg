<svg viewBox="0 0 1800 1400" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="1800" height="1400" fill="#fafbfc"/>
  
  <!-- Title -->
  <text x="900" y="30" text-anchor="middle" font-family="Times, serif" font-size="24" font-weight="bold" fill="#1a202c">
    EchoMotionAI System Class Diagram
  </text>
  <text x="900" y="55" text-anchor="middle" font-family="Times, serif" font-size="14" fill="#4a5568">
    Voice-Driven 3D Human Motion Generation Architecture
  </text>
  
  <!-- System Package Boundary -->
  <rect x="50" y="80" width="1700" height="1280" fill="#ffffff" stroke="#2d3748" stroke-width="2" stroke-dasharray="15,10" rx="10"/>
  <text x="70" y="105" font-family="Times, serif" font-size="16" font-weight="bold" fill="#2d3748">
    package: EchoMotionAI
  </text>
  
  <!-- Main Controller Class -->
  <rect x="800" y="130" width="200" height="120" fill="#e6f3ff" stroke="#2b6cb0" stroke-width="2" rx="5"/>
  <text x="900" y="150" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#2b6cb0">
    Main
  </text>
  <line x1="810" y1="160" x2="990" y2="160" stroke="#2b6cb0" stroke-width="1"/>
  <text x="810" y="175" font-family="Times, serif" font-size="10" fill="#2d3748">+ main(): void</text>
  <text x="810" y="188" font-family="Times, serif" font-size="10" fill="#2d3748">+ run_continuous_processing(): void</text>
  <text x="810" y="201" font-family="Times, serif" font-size="10" fill="#2d3748">+ initialize_system(): void</text>
  <text x="810" y="214" font-family="Times, serif" font-size="10" fill="#2d3748">+ health_check_llm(): boolean</text>
  <text x="810" y="227" font-family="Times, serif" font-size="10" fill="#2d3748">+ load_configuration(): Config</text>
  <text x="810" y="240" font-family="Times, serif" font-size="10" fill="#2d3748">- session_loop(): void</text>
  
  <!-- Audio Processing Classes -->
  <rect x="100" y="130" width="180" height="100" fill="#f0fff4" stroke="#25855a" stroke-width="2" rx="5"/>
  <text x="190" y="150" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#25855a">
    AudioCapture
  </text>
  <line x1="110" y1="160" x2="270" y2="160" stroke="#25855a" stroke-width="1"/>
  <text x="110" y="175" font-family="Times, serif" font-size="10" fill="#2d3748">- recorder: WindowsAudioRecorder</text>
  <text x="110" y="188" font-family="Times, serif" font-size="10" fill="#2d3748">+ start_recording(): void</text>
  <text x="110" y="201" font-family="Times, serif" font-size="10" fill="#2d3748">+ stop_recording(): void</text>
  <text x="110" y="214" font-family="Times, serif" font-size="10" fill="#2d3748">+ get_audio_data(): AudioData</text>
  
  <rect x="300" y="130" width="180" height="100" fill="#f0fff4" stroke="#25855a" stroke-width="2" rx="5"/>
  <text x="390" y="150" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#25855a">
    SpeechToTextService
  </text>
  <line x1="310" y1="160" x2="470" y2="160" stroke="#25855a" stroke-width="1"/>
  <text x="310" y="175" font-family="Times, serif" font-size="10" fill="#2d3748">- azure_client: AzureSpeechClient</text>
  <text x="310" y="188" font-family="Times, serif" font-size="10" fill="#2d3748">+ transcribe_audio(AudioData): string</text>
  <text x="310" y="201" font-family="Times, serif" font-size="10" fill="#2d3748">+ configure_service(): void</text>
  <text x="310" y="214" font-family="Times, serif" font-size="10" fill="#2d3748">- authenticate(): boolean</text>
  
  <!-- Core SceneGraph Class -->
  <rect x="500" y="300" width="220" height="160" fill="#fff7e6" stroke="#c05621" stroke-width="2" rx="5"/>
  <text x="610" y="320" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#c05621">
    SceneGraph
  </text>
  <line x1="510" y1="330" x2="710" y2="330" stroke="#c05621" stroke-width="1"/>
  <text x="510" y="345" font-family="Times, serif" font-size="10" fill="#2d3748">- memory_manager: MongoDBMemory</text>
  <text x="510" y="358" font-family="Times, serif" font-size="10" fill="#2d3748">- llm_client: LLMInference</text>
  <text x="510" y="371" font-family="Times, serif" font-size="10" fill="#2d3748">- scene_data: ScanNetScene</text>
  <text x="510" y="384" font-family="Times, serif" font-size="10" fill="#2d3748">- object_graph: Dict[str, Object3D]</text>
  <text x="510" y="397" font-family="Times, serif" font-size="10" fill="#2d3748">+ process_command(string): ProcessingResult</text>
  <text x="510" y="410" font-family="Times, serif" font-size="10" fill="#2d3748">+ identify_objects(string): ObjectList</text>
  <text x="510" y="423" font-family="Times, serif" font-size="10" fill="#2d3748">+ compute_spatial_relations(): RelationGraph</text>
  <text x="510" y="436" font-family="Times, serif" font-size="10" fill="#2d3748">+ load_gt_scene(): void</text>
  <text x="510" y="449" font-family="Times, serif" font-size="10" fill="#2d3748">- scenegraph_relationship(): Relations</text>
  
  <!-- MongoDB Memory System -->
  <rect x="100" y="300" width="180" height="140" fill="#e6ffe6" stroke="#2f855a" stroke-width="2" rx="5"/>
  <text x="190" y="320" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#2f855a">
    MongoDBMemory
  </text>
  <line x1="110" y1="330" x2="270" y2="330" stroke="#2f855a" stroke-width="1"/>
  <text x="110" y="345" font-family="Times, serif" font-size="10" fill="#2d3748">- client: MongoClient</text>
  <text x="110" y="358" font-family="Times, serif" font-size="10" fill="#2d3748">- database: Database</text>
  <text x="110" y="371" font-family="Times, serif" font-size="10" fill="#2d3748">- collection: Collection</text>
  <text x="110" y="384" font-family="Times, serif" font-size="10" fill="#2d3748">+ store_interaction(Interaction): void</text>
  <text x="110" y="397" font-family="Times, serif" font-size="10" fill="#2d3748">+ retrieve_context(session_id): Context</text>
  <text x="110" y="410" font-family="Times, serif" font-size="10" fill="#2d3748">+ create_session(): string</text>
  <text x="110" y="423" font-family="Times, serif" font-size="10" fill="#2d3748">+ close_session(session_id): void</text>
  
  <!-- LLM Inference Class -->
  <rect x="760" y="300" width="200" height="140" fill="#fff0f5" stroke="#b83280" stroke-width="2" rx="5"/>
  <text x="860" y="320" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#b83280">
    LLMInference
  </text>
  <line x1="770" y1="330" x2="950" y2="330" stroke="#b83280" stroke-width="1"/>
  <text x="770" y="345" font-family="Times, serif" font-size="10" fill="#2d3748">- model: Qwen2_5_3B_GRPO</text>
  <text x="770" y="358" font-family="Times, serif" font-size="10" fill="#2d3748">- tokenizer: AutoTokenizer</text>
  <text x="770" y="371" font-family="Times, serif" font-size="10" fill="#2d3748">- lora_adapter: LoRAAdapter</text>
  <text x="770" y="384" font-family="Times, serif" font-size="10" fill="#2d3748">+ parse_command(string): ParsedCommand</text>
  <text x="770" y="397" font-family="Times, serif" font-size="10" fill="#2d3748">+ extract_objects(string): ObjectList</text>
  <text x="770" y="410" font-family="Times, serif" font-size="10" fill="#2d3748">+ generate_response(prompt): string</text>
  <text x="770" y="423" font-family="Times, serif" font-size="10" fill="#2d3748">- load_grpo_model(): void</text>
  
  <!-- 3D Scene Processing Classes -->
  <rect x="1000" y="300" width="200" height="140" fill="#f5f0ff" stroke="#6b46c1" stroke-width="2" rx="5"/>
  <text x="1100" y="320" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#6b46c1">
    ScanNetProcessor
  </text>
  <line x1="1010" y1="330" x2="1190" y2="330" stroke="#6b46c1" stroke-width="1"/>
  <text x="1010" y="345" font-family="Times, serif" font-size="10" fill="#2d3748">- scene_loader: PLYLoader</text>
  <text x="1010" y="358" font-family="Times, serif" font-size="10" fill="#2d3748">- preprocessor: ScenePreprocessor</text>
  <text x="1010" y="371" font-family="Times, serif" font-size="10" fill="#2d3748">+ load_scene(scene_id): Scene3D</text>
  <text x="1010" y="384" font-family="Times, serif" font-size="10" fill="#2d3748">+ preprocess_scannet(): void</text>
  <text x="1010" y="397" font-family="Times, serif" font-size="10" fill="#2d3748">+ extract_objects(): ObjectMasks</text>
  <text x="1010" y="410" font-family="Times, serif" font-size="10" fill="#2d3748">+ compute_bounding_boxes(): BBoxes</text>
  <text x="1010" y="423" font-family="Times, serif" font-size="10" fill="#2d3748">- coordinate_transform(): Matrix4x4</text>
  
  <rect x="1230" y="300" width="180" height="120" fill="#f5f0ff" stroke="#6b46c1" stroke-width="2" rx="5"/>
  <text x="1320" y="320" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#6b46c1">
    Object3D
  </text>
  <line x1="1240" y1="330" x2="1400" y2="330" stroke="#6b46c1" stroke-width="1"/>
  <text x="1240" y="345" font-family="Times, serif" font-size="10" fill="#2d3748">+ position: Vector3D</text>
  <text x="1240" y="358" font-family="Times, serif" font-size="10" fill="#2d3748">+ bbox: BoundingBox</text>
  <text x="1240" y="371" font-family="Times, serif" font-size="10" fill="#2d3748">+ label: string</text>
  <text x="1240" y="384" font-family="Times, serif" font-size="10" fill="#2d3748">+ mask: ObjectMask</text>
  <text x="1240" y="397" font-family="Times, serif" font-size="10" fill="#2d3748">+ get_center(): Vector3D</text>
  <text x="1240" y="410" font-family="Times, serif" font-size="10" fill="#2d3748">+ compute_distance(Object3D): float</text>
  
  <!-- Motion Generation Classes -->
  <rect x="100" y="520" width="200" height="140" fill="#ebf8ff" stroke="#3182ce" stroke-width="2" rx="5"/>
  <text x="200" y="540" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#3182ce">
    DiffuserNetwork
  </text>
  <line x1="110" y1="550" x2="290" y2="550" stroke="#3182ce" stroke-width="1"/>
  <text x="110" y="565" font-family="Times, serif" font-size="10" fill="#2d3748">- model_type: string</text>
  <text x="110" y="578" font-family="Times, serif" font-size="10" fill="#2d3748">- noise_scheduler: DDPMScheduler</text>
  <text x="110" y="591" font-family="Times, serif" font-size="10" fill="#2d3748">- unet: UNet2DConditionModel</text>
  <text x="110" y="604" font-family="Times, serif" font-size="10" fill="#2d3748">+ generate_trajectory(): Trajectory</text>
  <text x="110" y="617" font-family="Times, serif" font-size="10" fill="#2d3748">+ generate_motion(): Motion</text>
  <text x="110" y="630" font-family="Times, serif" font-size="10" fill="#2d3748">+ sample(context): MotionSequence</text>
  <text x="110" y="643" font-family="Times, serif" font-size="10" fill="#2d3748">- denoise_step(): Tensor</text>
  
  <rect x="330" y="520" width="200" height="120" fill="#ebf8ff" stroke="#3182ce" stroke-width="2" rx="5"/>
  <text x="430" y="540" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#3182ce">
    MotionGenerator
  </text>
  <line x1="340" y1="550" x2="520" y2="550" stroke="#3182ce" stroke-width="1"/>
  <text x="340" y="565" font-family="Times, serif" font-size="10" fill="#2d3748">- stage1: DiffuserNetwork</text>
  <text x="340" y="578" font-family="Times, serif" font-size="10" fill="#2d3748">- stage2: DiffuserNetwork</text>
  <text x="340" y="591" font-family="Times, serif" font-size="10" fill="#2d3748">- normalizer: NormalizerPoseMotion</text>
  <text x="340" y="604" font-family="Times, serif" font-size="10" fill="#2d3748">+ generate_motion(context): Motion</text>
  <text x="340" y="617" font-family="Times, serif" font-size="10" fill="#2d3748">+ process_trajectory(): Trajectory</text>
  <text x="340" y="630" font-family="Times, serif" font-size="10" fill="#2d3748">- two_stage_pipeline(): Motion</text>
  
  <!-- SMPL-X and Human Model Classes -->
  <rect x="560" y="520" width="200" height="140" fill="#fff5eb" stroke="#dd6b20" stroke-width="2" rx="5"/>
  <text x="660" y="540" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#dd6b20">
    SMPLXModel
  </text>
  <line x1="570" y1="550" x2="750" y2="550" stroke="#dd6b20" stroke-width="1"/>
  <text x="570" y="565" font-family="Times, serif" font-size="10" fill="#2d3748">- model: SMPLX</text>
  <text x="570" y="578" font-family="Times, serif" font-size="10" fill="#2d3748">- pose_params: Tensor[69]</text>
  <text x="570" y="591" font-family="Times, serif" font-size="10" fill="#2d3748">- beta_params: Tensor[10]</text>
  <text x="570" y="604" font-family="Times, serif" font-size="10" fill="#2d3748">- vertices: Tensor[6890, 3]</text>
  <text x="570" y="617" font-family="Times, serif" font-size="10" fill="#2d3748">+ generate_mesh(): Mesh</text>
  <text x="570" y="630" font-family="Times, serif" font-size="10" fill="#2d3748">+ apply_pose(pose): void</text>
  <text x="570" y="643" font-family="Times, serif" font-size="10" fill="#2d3748">+ get_vertices(): Tensor</text>
  <text x="570" y="656" font-family="Times, serif" font-size="10" fill="#2d3748">- forward_pass(): Mesh</text>
  
  <rect x="790" y="520" width="200" height="120" fill="#fff5eb" stroke="#dd6b20" stroke-width="2" rx="5"/>
  <text x="890" y="540" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#dd6b20">
    HumaniseDataset
  </text>
  <line x1="800" y1="550" x2="980" y2="550" stroke="#dd6b20" stroke-width="1"/>
  <text x="800" y="565" font-family="Times, serif" font-size="10" fill="#2d3748">- motion_data: List[MotionSequence]</text>
  <text x="800" y="578" font-family="Times, serif" font-size="10" fill="#2d3748">- scene_alignment: AlignmentData</text>
  <text x="800" y="591" font-family="Times, serif" font-size="10" fill="#2d3748">+ load_motion_data(): void</text>
  <text x="800" y="604" font-family="Times, serif" font-size="10" fill="#2d3748">+ get_aligned_motion(): Motion</text>
  <text x="800" y="617" font-family="Times, serif" font-size="10" fill="#2d3748">+ process_smplx_params(): Params</text>
  <text x="800" y="630" font-family="Times, serif" font-size="10" fill="#2d3748">- align_with_scene(): void</text>
  
  <!-- Data Processing Classes -->
  <rect x="1020" y="520" width="180" height="120" fill="#f7fafc" stroke="#805ad5" stroke-width="2" rx="5"/>
  <text x="1110" y="540" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#805ad5">
    NormalizerPoseMotion
  </text>
  <line x1="1030" y1="550" x2="1190" y2="550" stroke="#805ad5" stroke-width="1"/>
  <text x="1030" y="565" font-family="Times, serif" font-size="10" fill="#2d3748">- min_vals: Tensor</text>
  <text x="1030" y="578" font-family="Times, serif" font-size="10" fill="#2d3748">- max_vals: Tensor</text>
  <text x="1030" y="591" font-family="Times, serif" font-size="10" fill="#2d3748">+ normalize(data): Tensor</text>
  <text x="1030" y="604" font-family="Times, serif" font-size="10" fill="#2d3748">+ denormalize(data): Tensor</text>
  <text x="1030" y="617" font-family="Times, serif" font-size="10" fill="#2d3748">+ build_normalizer(): void</text>
  <text x="1030" y="630" font-family="Times, serif" font-size="10" fill="#2d3748">- compute_statistics(): Stats</text>
  
  <rect x="1230" y="520" width="180" height="100" fill="#f7fafc" stroke="#805ad5" stroke-width="2" rx="5"/>
  <text x="1320" y="540" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#805ad5">
    CoordinateManager
  </text>
  <line x1="1240" y1="550" x2="1400" y2="550" stroke="#805ad5" stroke-width="1"/>
  <text x="1240" y="565" font-family="Times, serif" font-size="10" fill="#2d3748">- frames: Dict[str, Frame]</text>
  <text x="1240" y="578" font-family="Times, serif" font-size="10" fill="#2d3748">+ transform_hm_to_oc(): Matrix</text>
  <text x="1240" y="591" font-family="Times, serif" font-size="10" fill="#2d3748">+ transform_oc_to_scannet(): Matrix</text>
  <text x="1240" y="604" font-family="Times, serif" font-size="10" fill="#2d3748">+ apply_transform(): Vector3D</text>
  <text x="1240" y="617" font-family="Times, serif" font-size="10" fill="#2d3748">- compute_transformation(): Matrix4x4</text>
  
  <!-- Visualization Classes -->
  <rect x="100" y="720" width="200" height="120" fill="#ffe6e6" stroke="#e53e3e" stroke-width="2" rx="5"/>
  <text x="200" y="740" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#e53e3e">
    VisualizationPipeline
  </text>
  <line x1="110" y1="750" x2="290" y2="750" stroke="#e53e3e" stroke-width="1"/>
  <text x="110" y="765" font-family="Times, serif" font-size="10" fill="#2d3748">- scene_renderer: PLYRenderer</text>
  <text x="110" y="778" font-family="Times, serif" font-size="10" fill="#2d3748">- mesh_generator: MeshGenerator</text>
  <text x="110" y="791" font-family="Times, serif" font-size="10" fill="#2d3748">+ run_visualization_pipeline(): void</text>
  <text x="110" y="804" font-family="Times, serif" font-size="10" fill="#2d3748">+ generate_ply_files(): void</text>
  <text x="110" y="817" font-family="Times, serif" font-size="10" fill="#2d3748">+ create_web_interface(): void</text>
  <text x="110" y="830" font-family="Times, serif" font-size="10" fill="#2d3748">- render_frame(): Frame</text>
  
  <rect x="330" y="720" width="180" height="100" fill="#ffe6e6" stroke="#e53e3e" stroke-width="2" rx="5"/>
  <text x="420" y="740" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#e53e3e">
    Wis3DServer
  </text>
  <line x1="340" y1="750" x2="500" y2="750" stroke="#e53e3e" stroke-width="1"/>
  <text x="340" y="765" font-family="Times, serif" font-size="10" fill="#2d3748">- server: WebServer</text>
  <text x="340" y="778" font-family="Times, serif" font-size="10" fill="#2d3748">- port: int = 8080</text>
  <text x="340" y="791" font-family="Times, serif" font-size="10" fill="#2d3748">+ start_server(): void</text>
  <text x="340" y="804" font-family="Times, serif" font-size="10" fill="#2d3748">+ serve_visualization(): void</text>
  <text x="340" y="817" font-family="Times, serif" font-size="10" fill="#2d3748">- handle_requests(): Response</text>
  
  <!-- RLHF Classes -->
  <rect x="540" y="720" width="200" height="140" fill="#fef5e7" stroke="#d69e2e" stroke-width="2" rx="5"/>
  <text x="640" y="740" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#d69e2e">
    GRPOTrainer
  </text>
  <line x1="550" y1="750" x2="730" y2="750" stroke="#d69e2e" stroke-width="1"/>
  <text x="550" y="765" font-family="Times, serif" font-size="10" fill="#2d3748">- base_model: Qwen2_5_3B</text>
  <text x="550" y="778" font-family="Times, serif" font-size="10" fill="#2d3748">- reward_functions: List[Function]</text>
  <text x="550" y="791" font-family="Times, serif" font-size="10" fill="#2d3748">- lora_config: LoRAConfig</text>
  <text x="550" y="804" font-family="Times, serif" font-size="10" fill="#2d3748">+ train_model(): Model</text>
  <text x="550" y="817" font-family="Times, serif" font-size="10" fill="#2d3748">+ correctness_reward_func(): float</text>
  <text x="550" y="830" font-family="Times, serif" font-size="10" fill="#2d3748">+ format_reward_func(): float</text>
  <text x="550" y="843" font-family="Times, serif" font-size="10" fill="#2d3748">+ int_reward_func(): float</text>
  <text x="550" y="856" font-family="Times, serif" font-size="10" fill="#2d3748">- update_policy(): void</text>
  
  <!-- Data Model Classes -->
  <rect x="1450" y="130" width="200" height="140" fill="#f0f9f0" stroke="#38a169" stroke-width="2" rx="5"/>
  <text x="1550" y="150" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#38a169">
    SessionDocument
  </text>
  <line x1="1460" y1="160" x2="1640" y2="160" stroke="#38a169" stroke-width="1"/>
  <text x="1460" y="175" font-family="Times, serif" font-size="10" fill="#2d3748">+ _id: ObjectId</text>
  <text x="1460" y="188" font-family="Times, serif" font-size="10" fill="#2d3748">+ type: string</text>
  <text x="1460" y="201" font-family="Times, serif" font-size="10" fill="#2d3748">+ session_id: string</text>
  <text x="1460" y="214" font-family="Times, serif" font-size="10" fill="#2d3748">+ timestamp: DateTime</text>
  <text x="1460" y="227" font-family="Times, serif" font-size="10" fill="#2d3748">+ description: string</text>
  <text x="1460" y="240" font-family="Times, serif" font-size="10" fill="#2d3748">+ closed: boolean</text>
  <text x="1460" y="253" font-family="Times, serif" font-size="10" fill="#2d3748">+ closed_at: DateTime</text>
  <text x="1460" y="266" font-family="Times, serif" font-size="10" fill="#2d3748">+ to_dict(): Dict</text>
  
  <rect x="1450" y="300" width="200" height="160" fill="#f0f9f0" stroke="#38a169" stroke-width="2" rx="5"/>
  <text x="1550" y="320" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#38a169">
    InteractionDocument
  </text>
  <line x1="1460" y1="330" x2="1640" y2="330" stroke="#38a169" stroke-width="1"/>
  <text x="1460" y="345" font-family="Times, serif" font-size="10" fill="#2d3748">+ _id: ObjectId</text>
  <text x="1460" y="358" font-family="Times, serif" font-size="10" fill="#2d3748">+ type: string = "interaction"</text>
  <text x="1460" y="371" font-family="Times, serif" font-size="10" fill="#2d3748">+ session_id: string</text>
  <text x="1460" y="384" font-family="Times, serif" font-size="10" fill="#2d3748">+ timestamp: DateTime</text>
  <text x="1460" y="397" font-family="Times, serif" font-size="10" fill="#2d3748">+ input: InputData</text>
  <text x="1460" y="410" font-family="Times, serif" font-size="10" fill="#2d3748">+ processing: ProcessingData</text>
  <text x="1460" y="423" font-family="Times, serif" font-size="10" fill="#2d3748">+ response: ResponseData</text>
  <text x="1460" y="436" font-family="Times, serif" font-size="10" fill="#2d3748">+ relations: SpatialRelations</text>
  <text x="1460" y="449" font-family="Times, serif" font-size="10" fill="#2d3748">+ validate(): boolean</text>
  
  <!-- Configuration and Utility Classes -->
  <rect x="1050" y="130" width="180" height="100" fill="#f8f9fa" stroke="#718096" stroke-width="2" rx="5"/>
  <text x="1140" y="150" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#718096">
    Configuration
  </text>
  <line x1="1060" y1="160" x2="1220" y2="160" stroke="#718096" stroke-width="1"/>
  <text x="1060" y="175" font-family="Times, serif" font-size="10" fill="#2d3748">+ llm_config: LLMConfig</text>
  <text x="1060" y="188" font-family="Times, serif" font-size="10" fill="#2d3748">+ mongodb_config: DBConfig</text>
  <text x="1060" y="201" font-family="Times, serif" font-size="10" fill="#2d3748">+ azure_config: AzureConfig</text>
  <text x="1060" y="214" font-family="Times, serif" font-size="10" fill="#2d3748">+ load_from_yaml(): void</text>
  <text x="1060" y="227" font-family="Times, serif" font-size="10" fill="#2d3748">+ validate_config(): boolean</text>
  
  <!-- Output Classes -->
  <rect x="770" y="720" width="180" height="120" fill="#fef5e7" stroke="#d69e2e" stroke-width="2" rx="5"/>
  <text x="860" y="740" text-anchor="middle" font-family="Times, serif" font-size="14" font-weight="bold" fill="#d69e2e">
    OutputManager
  </text>
  <line x1="780" y1="750" x2="940" y2="750" stroke="#d69e2e" stroke-width="1"/>
  <text x="780" y="765" font-family="Times, serif" font-size="10" fill="#2d3748">- output_dir: string</text>
  <text x="780" y="778" font-family="Times, serif" font-size="10" fill="#2d3748">+ save_response_file(): void</text>
  <text x="780" y="791" font-family="Times, serif" font-size="10" fill="#2d3748">+ save_object_points(): void</text>
  <text x="780" y="804" font-family="Times, serif" font-size="10" fill="#2d3748">+ save_motion_samples(): void</text>
  <text x="780" y="817" font-family="Times, serif" font-size="10" fill="#2d3748">+ export_visualization(): void</text>
  <text x="780" y="830" font-family="Times, serif" font-size="10" fill="#2d3748">- create_directory(): void</text>
  
  <!-- Association Lines -->
  
  <!-- Main to other classes -->
  <line x1="800" y1="190" x2="480" y2="180" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="640" y="175" font-family="Times, serif" font-size="9" fill="#2d3748">uses</text>
  
  <line x1="900" y1="250" x2="610" y2="300" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="750" y="280" font-family="Times, serif" font-size="9" fill="#2d3748">creates</text>
  
  <line x1="1000" y1="180" x2="1050" y2="180" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="1020" y="175" font-family="Times, serif" font-size="9" fill="#2d3748">loads</text>
  
  <!-- SceneGraph associations -->
  <line x1="500" y1="350" x2="280" y2="350" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="390" y="345" font-family="Times, serif" font-size="9" fill="#2d3748">uses</text>
  
  <line x1="720" y1="350" x2="760" y2="350" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="735" y="345" font-family="Times, serif" font-size="9" fill="#2d3748">uses</text>
  
  <line x1="700" y1="390" x2="1000" y2="390" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="850" y="385" font-family="Times, serif" font-size="9" fill="#2d3748">processes</text>
  
  <!-- Motion generation flow -->
  <line x1="530" y1="580" x2="560" y2="580" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="540" y="575" font-family="Times, serif" font-size="9" fill="#2d3748">→</text>
  
  <line x1="300" y1="590" x2="330" y2="590" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="310" y="585" font-family="Times, serif" font-size="9" fill="#2d3748">→</text>
  
  <line x1="530" y1="600" x2="1020" y2="600" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="770" y="595" font-family="Times, serif" font-size="9" fill="#2d3748">normalizes</text>
  
  <!-- Visualization flow -->
  <line x1="660" y1="660" x2="200" y2="720" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="430" y="690" font-family="Times, serif" font-size="9" fill="#2d3748">renders</text>
  
  <line x1="300" y1="770" x2="330" y2="770" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="310" y="765" font-family="Times, serif" font-size="9" fill="#2d3748">→</text>
  
  <!-- MongoDB to Documents -->
  <line x1="280" y1="340" x2="1450" y2="200" stroke="#2d3748" stroke-width="1" stroke-dasharray="5,5" marker-end="url(#arrowhead)"/>
  <text x="860" y="270" font-family="Times, serif" font-size="9" fill="#2d3748">stores</text>
  
  <line x1="280" y1="380" x2="1450" y2="380" stroke="#2d3748" stroke-width="1" stroke-dasharray="5,5" marker-end="url(#arrowhead)"/>
  <text x="860" y="375" font-family="Times, serif" font-size="9" fill="#2d3748">manages</text>
  
  <!-- Object3D to ScanNet -->
  <line x1="1200" y1="360" x2="1230" y2="360" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="1210" y="355" font-family="Times, serif" font-size="9" fill="#2d3748">creates</text>
  
  <!-- Composition relationships (filled diamonds) -->
  <polygon points="520,580 530,575 540,580 530,585" fill="#2d3748"/>
  <line x1="540" y1="580" x2="560" y2="580" stroke="#2d3748" stroke-width="2"/>
  
  <polygon points="290,600 300,595 310,600 300,605" fill="#2d3748"/>
  <line x1="310" y1="600" x2="330" y2="600" stroke="#2d3748" stroke-width="2"/>
  
  <!-- Dependency arrows for RLHF -->
  <line x1="740" y1="780" x2="760" y2="380" stroke="#2d3748" stroke-width="1" stroke-dasharray="8,4" marker-end="url(#arrowhead)"/>
  <text x="720" y="580" font-family="Times, serif" font-size="9" fill="#2d3748" transform="rotate(-75, 720, 580)">trains</text>
  
  <!-- Legend Box -->
  <rect x="100" y="900" width="600" height="200" fill="#f7fafc" stroke="#cbd5e0" stroke-width="1" rx="8"/>
  <text x="400" y="925" text-anchor="middle" font-family="Times, serif" font-size="16" font-weight="bold" fill="#2d3748">
    Class Diagram Legend
  </text>
  <line x1="120" y1="935" x2="680" y2="935" stroke="#cbd5e0" stroke-width="1"/>
  
  <!-- Legend items -->
  <text x="120" y="955" font-family="Times, serif" font-size="12" font-weight="bold" fill="#2d3748">
    Class Structure:
  </text>
  <rect x="130" y="965" width="120" height="40" fill="#e6f3ff" stroke="#2b6cb0" stroke-width="1" rx="3"/>
  <text x="190" y="980" text-anchor="middle" font-family="Times, serif" font-size="10" font-weight="bold" fill="#2b6cb0">ClassName</text>
  <line x1="135" y1="985" x2="245" y2="985" stroke="#2b6cb0" stroke-width="1"/>
  <text x="135" y="995" font-family="Times, serif" font-size="8" fill="#2d3748">+ public method</text>
  <text x="135" y="1002" font-family="Times, serif" font-size="8" fill="#2d3748">- private method</text>
  
  <text x="270" y="980" font-family="Times, serif" font-size="10" fill="#2d3748">Class with attributes</text>
  <text x="270" y="995" font-family="Times, serif" font-size="10" fill="#2d3748">and methods</text>
  
  <!-- Relationships -->
  <text x="120" y="1025" font-family="Times, serif" font-size="12" font-weight="bold" fill="#2d3748">
    Relationships:
  </text>
  
  <line x1="130" y1="1040" x2="180" y2="1040" stroke="#2d3748" stroke-width="1" marker-end="url(#arrowhead)"/>
  <text x="190" y="1045" font-family="Times, serif" font-size="10" fill="#2d3748">Association (uses)</text>
  
  <line x1="130" y1="1055" x2="180" y2="1055" stroke="#2d3748" stroke-width="1" stroke-dasharray="5,5" marker-end="url(#arrowhead)"/>
  <text x="190" y="1060" font-family="Times, serif" font-size="10" fill="#2d3748">Dependency</text>
  
  <polygon points="130,1070 140,1065 150,1070 140,1075" fill="#2d3748"/>
  <line x1="150" y1="1070" x2="180" y2="1070" stroke="#2d3748" stroke-width="2"/>
  <text x="190" y="1075" font-family="Times, serif" font-size="10" fill="#2d3748">Composition (part-of)</text>
  
  <!-- Color coding -->
  <text x="400" y="1025" font-family="Times, serif" font-size="12" font-weight="bold" fill="#2d3748">
    Component Categories:
  </text>
  
  <rect x="410" y="1035" width="15" height="10" fill="#e6f3ff" stroke="#2b6cb0" stroke-width="1"/>
  <text x="435" y="1044" font-family="Times, serif" font-size="10" fill="#2d3748">Core System Control</text>
  
  <rect x="410" y="1050" width="15" height="10" fill="#f0fff4" stroke="#25855a" stroke-width="1"/>
  <text x="435" y="1059" font-family="Times, serif" font-size="10" fill="#2d3748">Audio Processing</text>
  
  <rect x="410" y="1065" width="15" height="10" fill="#fff7e6" stroke="#c05621" stroke-width="1"/>
  <text x="435" y="1074" font-family="Times, serif" font-size="10" fill="#2d3748">Scene Understanding</text>
  
  <rect x="550" y="1035" width="15" height="10" fill="#ebf8ff" stroke="#3182ce" stroke-width="1"/>
  <text x="575" y="1044" font-family="Times, serif" font-size="10" fill="#2d3748">Motion Generation</text>
  
  <rect x="550" y="1050" width="15" height="10" fill="#ffe6e6" stroke="#e53e3e" stroke-width="1"/>
  <text x="575" y="1059" font-family="Times, serif" font-size="10" fill="#2d3748">Visualization</text>
  
  <rect x="550" y="1065" width="15" height="10" fill="#f0f9f0" stroke="#38a169" stroke-width="1"/>
  <text x="575" y="1074" font-family="Times, serif" font-size="10" fill="#2d3748">Data Models</text>
  
  <!-- Additional System Information Box -->
  <rect x="750" y="900" width="400" height="200" fill="#f7fafc" stroke="#cbd5e0" stroke-width="1" rx="8"/>
  <text x="950" y="925" text-anchor="middle" font-family="Times, serif" font-size="16" font-weight="bold" fill="#2d3748">
    System Architecture Notes
  </text>
  <line x1="770" y1="935" x2="1130" y2="935" stroke="#cbd5e0" stroke-width="1"/>
  
  <text x="770" y="955" font-family="Times, serif" font-size="11" font-weight="bold" fill="#2d3748">
    Key Design Patterns:
  </text>
  <text x="770" y="970" font-family="Times, serif" font-size="10" fill="#2d3748">
    • Pipeline Pattern: Two-stage motion generation
  </text>
  <text x="770" y="985" font-family="Times, serif" font-size="10" fill="#2d3748">
    • Strategy Pattern: Multiple coordinate systems
  </text>
  <text x="770" y="1000" font-family="Times, serif" font-size="10" fill="#2d3748">
    • Observer Pattern: Memory system monitoring
  </text>
  
  <text x="770" y="1020" font-family="Times, serif" font-size="11" font-weight="bold" fill="#2d3748">
    Technology Stack:
  </text>
  <text x="770" y="1035" font-family="Times, serif" font-size="10" fill="#2d3748">
    • LLM: Qwen 2.5-3B with GRPO RLHF
  </text>
  <text x="770" y="1050" font-family="Times, serif" font-size="10" fill="#2d3748">
    • Database: MongoDB for session management
  </text>
  <text x="770" y="1065" font-family="Times, serif" font-size="10" fill="#2d3748">
    • 3D Processing: ScanNet + SMPL-X models
  </text>
  <text x="770" y="1080" font-family="Times, serif" font-size="10" fill="#2d3748">
    • Visualization: Wis3D web interface
  </text>
  
  <!-- Arrow markers -->
  <defs>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" 
     refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#2d3748"/>
    </marker>
    
    <!-- Drop shadows for better visual hierarchy -->
    <filter id="dropshadow" x="-20%" y="-20%" width="140%" height="140%">
      <feDropShadow dx="2" dy="2" stdDeviation="3" flood-color="#000000" flood-opacity="0.1"/>
    </filter>
  </defs>
  
  <!-- Apply shadows to main elements -->
  <style>
    rect { filter: url(#dropshadow); }
  </style>
 </svg>